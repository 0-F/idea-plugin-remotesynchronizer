<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="RemoteSynchronizer" default="dist" basedir=".">

  <path id="idea.dir" path="."/>
  <property name="plugins.dir" value="${idea.dir}/plugins"/>
  <property file="version.properties"/>

  <property name="dist.name" value="${ant.project.name}-${version.number}"/>

  <!-- Source directories -->
  <property name="src.dir" value="${basedir}/src/main/java"/>
  <property name="samples.dir" value="${basedir}/test/samples"/>

  <!-- Destination directories -->
  <property name="build.dir" value="${basedir}/build"/>
  <property name="classes.build.dir" value="${build.dir}/classes/main"/>
  <property name="dist.build.dir" value="${build.dir}/dist"/>
  <property name="docs.build.dir" value="${build.dir}/docs"/>
  <property name="lib.build.dir" value="${build.dir}/lib"/>

  <!-- Deployment directories -->
  <property name="lib.idea.dir" value="${idea.dir}/lib"/>

  <!-- Compiler settings -->
  <property name="compile.debug" value="on"/>

  <path id="compile.classpath">
    <fileset dir="${lib.idea.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Init properties/filters -->
  <target name="init">
    <tstamp>
      <format property="year" pattern="yyyy"/>
      <format property="month" pattern="MM"/>
      <format property="day" pattern="dd"/>
    </tstamp>

    <filterset id="all.filters">
      <filter token="PLUGIN_VERSION" value="${version.number}"/>
    </filterset>
  </target>

  <!-- Creates directories -->
  <target name="prepare" depends="init">
    <mkdir dir="${classes.build.dir}"/>
    <mkdir dir="${dist.build.dir}"/>
    <mkdir dir="${lib.build.dir}"/>
    <mkdir dir="${docs.build.dir}"/>
  </target>

  <!-- Clean up  -->
  <target name="clean"
    description="Deletes the build directory.">
    <delete dir="${build.dir}"/>
  </target>

  <!-- Builds the javadoc for the project   -->
  <target name="javadoc" depends="prepare"
    description="Builds the javadoc">
    <javadoc
      packagenames="idea.*"
      sourcepath="${src.dir}"
      destdir="${docs.build.dir}"
      private="true"
      author="true"
      version="true"
      use="true"
      failonerror="false"
      windowtitle="${ant.project.name} API"
      doctitle="${ant.project.name}">
      <classpath refid="compile.classpath"/>
      <link href="http://java.sun.com/products/jdk/1.4/docs/api"/>
    </javadoc>
  </target>

  <!-- Compiles only -->
  <target name="compile" depends="prepare"
    description="Compiles all source files">
    <copy todir="${build.dir}/src-filtered" filtering="true">
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <filterset refid="all.filters"/>
    </copy>
    <javac srcdir="${build.dir}/src-filtered"
      destdir="${classes.build.dir}"
      debug="${compile.debug}">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${classes.build.dir}" filtering="true" overwrite="true">
      <fileset dir="${src.dir}" includes="**/*.properties, **/*.xml"/>
      <filterset refid="all.filters"/>
    </copy>
    <copy todir="${classes.build.dir}" filtering="false" overwrite="true">
      <fileset dir="${src.dir}" excludes="**/*.java, **/*.properties, **/*.xml"/>
    </copy>
  </target>

  <!-- Builds the jar file  -->
  <target name="build-jar" depends="prepare, test, jar"/>

  <target name="update-meta-inf" depends="prepare"
    description="Create plugin deployment descriptors">
    <copy todir="${build.dir}" filtering="yes" overwrite="true">
      <fileset dir="${basedir}" includes="META-INF/*.xml"/>
      <filterset refid="all.filters"/>
    </copy>
  </target>

  <target name="jar" depends="update-meta-inf">
    <property name="plugin.jar" value="${lib.build.dir}/${dist.name}.jar"/>
    <propertyfile file="version.properties" comment="${ant.project.name}">
      <entry key="version.number" value="${version.number}"/>
      <entry key="build.number" type="int" default="0" operation="+"/>
    </propertyfile>
    <property file="version.properties"/>

    <jar jarfile="${plugin.jar}">
      <fileset dir="${basedir}" includes="version.properties"/>
      <fileset dir="${basedir}/src/main/resources" includes="**"/>
      <fileset dir="${build.dir}" includes="META-INF/**"/>
      <fileset dir="${classes.build.dir}" excludes="**/*Test.class, **/*Test$*.class, .*/**"/>
      <manifest>
        <attribute name="version" value="${ant.project.name} v${version.number} - build ${build.number}"/>
      </manifest>
    </jar>
  </target>

  <!--Builds a distribution snapshop of the project -->
  <target name="dist" depends="clean, compile, build-jar"
    description="Builds a distribution snapshop">

    <zip zipfile="${dist.build.dir}/${dist.name}-src.zip">
      <fileset dir="${basedir}">
        <include name="**/*"/>
        <exclude name="build/**"/>
      </fileset>
    </zip>

    <copy todir="${dist.build.dir}">
      <fileset dir="${lib.build.dir}"/>
      <fileset file="${build.dir}/META-INF/idea-plugin-registry.xml"/>
    </copy>

  </target>

  <target name="copyToIdeaTest"
    description="Copy plugin jar in IDEA's test instance plugins dir">
    <antcall target="jar">
      <param name="plugin.jar" value="${plugins.dir}/${dist.name}.jar"/>
    </antcall>
  </target>

  <!-- Unit tests -->
  <target name="test" depends="compile" description="Unit tests">
    <!--
       Hum, too boring to test with OpenAPI...
        <junit fork="yes" printsummary="on">
          <classpath>
            <pathelement location="${classes.build.dir}"/>
            <path refid="compile.classpath"/>
          </classpath>

          <batchtest fork="yes" failureproperty="test.failed" errorproperty="test.failed">
            <fileset dir="${classes.build.dir}">
              <include name="**/*Test.class"/>
            </fileset>
            <formatter type="plain"/>
          </batchtest>
        </junit>
        <fail if="test.failed" message="Unit tests failed"/>
    -->
  </target>

</project>

